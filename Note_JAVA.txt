Java 基础语法
一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。
		对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。
		类：类是一个模板，它描述一类对象的行为和状态。
		方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。
		实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。

基本语法
编写Java程序时，应注意以下几点：
		大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。
		类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
		方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
		源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。
		（如果文件名和类名不相同则会导致编译错误）。
		主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行。
		
ava标识符
Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。
		关于Java标识符，有以下几点需要注意：
		所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始
		首字符之后可以是任何字符的组合
		关键字不能用作标识符
		标识符是大小写敏感的
		合法标识符举例：age、$salary、_value、__1_value
		非法标识符举例：123abc、-salary

Java修饰符
像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：
		可访问修饰符 : default, public , protected, private
		不可访问修饰符 : final, abstract, strictfp
				
Java变量
Java中主要有如下几种类型的变量
		局部变量
		类变量（静态变量）
		成员变量（非静态变量）
	
Java数组
	 数组是储存在堆上的对象，可以保存多个同类型变量。
	
Java枚举
		Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的bug。
继承
		在Java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。
		利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。		
接口
		在Java中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。
		接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。
		
Java中的类
		构造方法
		每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。
		在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。
		创建对象		
对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：
		声明：声明一个对象，包括对象名称和对象类型。
		实例化：使用关键字new来创建一个对象。
		初始化：使用new创建对象时，会调用构造方法初始化对象。
		下面是一个创建对象的例子：
		public class Puppy{
		   public Puppy(String name){
		      //这个构造器仅有一个参数：name
		      System.out.println("小狗的名字是 : " + name ); 
		   }
		   public static void main(String []args){
		      // 下面的语句将创建一个Puppy对象
		      Puppy myPuppy = new Puppy( "tommy" );
	   }
		}
		
访问实例变量和方法
通过已创建的对象来访问成员变量和成员方法，如下所示：
		/* 实例化对象 */
		ObjectReference = new Constructor();
		/* 访问类中的变量 */
		ObjectReference.variableName;
		/* 访问类中的方法 */
		ObjectReference.MethodName();
		
源文件声明规则
	当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。
	
	一个源文件中只能有一个public类
	一个源文件可以有多个非public类
	源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。
	如果一个类定义在某个包中，那么package语句应该在源文件的首行。
	如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。
	import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。
	
Java包
		包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。
Import语句
		在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供
		一个合理的路径，使得编译器可以找到某个类。

Java 基本数据类型
		Java 的两大数据类型:
		内置数据类型
		引用数据类型
内置数据类型
		Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。
		byte,short,int,long,float,double,boolean,char
		实际上，JAVA中还存在另外一种基本类型void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作
引用类型
		在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特
		定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。
		对象、数组都是引用数据类型。
		所有引用类型的默认值都是null。
		一个引用变量可以用来引用任何与之兼容的类型。
Java 常量
		常量在程序运行时是不能被修改的。
		在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似.虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。
自动类型转换
		整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。		
		转换从低级到高级。		
		低  ------------------------------------>  高		
		byte,short,char―> int ―> long―> float ―> double 
		数据类型转换必须满足如下规则：
		1. 不能对boolean类型进行类型转换。		
		2. 不能把对象类型转换成不相关类的对象。		
		3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。		
		4. 转换过程中可能导致溢出或损失精度，例如：
		5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入
强制类型转换
		1. 条件是转换的数据类型必须是兼容的。
		2. 格式：(type)value type是要强制类型转换后的数据类型
隐含强制类型转换
		1. 整数的默认类型是 int。
		2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。
		
Java 局部变量
		局部变量声明在方法、构造方法或者语句块中；
		局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；
		访问修饰符不能用于局部变量；
		局部变量只在声明它的方法、构造方法或者语句块中可见；
		局部变量是在栈上分配的。
		局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。
		
实例变量
		实例变量声明在一个类中，但在方法、构造方法和语句块之外；
		当一个对象被实例化之后，每个实例变量的值就跟着确定；
		实例变量在对象创建的时候创建，在对象被销毁的时候销毁；
		实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；
		实例变量可以声明在使用前或者使用后；
		访问修饰符可以修饰实例变量；
		实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；
		实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可
		以在构造方法中指定；
		实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。
		
类变量（静态变量）
		类变量也称为静态变量，在类中以static关键字声明，但必须在方法构造方法和语句块之外。
		无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。
		静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。
		静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。
		静态变量在程序开始时创建，在程序结束时销毁。
		与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。
		默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。
		此外，静态变量还可以在静态语句块中初始化。
		静态变量可以通过：ClassName.VariableName的方式访问。
		类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及
		局部变量的命名方式一致。